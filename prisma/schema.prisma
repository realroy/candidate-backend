// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String?
  profileUrl  String?
  appointment Appointment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
}

model Candidate {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  profileUrl            String?
  candidateAppointments CandidateAppointment[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
}

model Appointment {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  description           String?
  status                AppointmentStatus      @default(TO_DO)
  comments              Comment[]
  creator               Admin?                 @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId             Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  candidateAppointments CandidateAppointment[]

  @@index([status], name: "status")
}

enum AppointmentStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

model CandidateAppointment {
  id            Int          @id @default(autoincrement())
  candidate     Candidate?   @relation(fields: [candidateId], references: [id], onDelete: SetNull)
  candidateId   Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  appointmentId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  @@unique([candidateId, appointmentId])
  @@index([candidateId], name: "candidateId")
  @@index([appointmentId], name: "appointmentId")
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String

  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  appointmentId Int?

  commentOwnableId   Int?
  commentOwnableType CommentOwnableType?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum CommentOwnableType {
  Admin
  Candidate
}
